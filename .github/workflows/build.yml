name: ZMK Build + Diagnostics

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    # Run inside the official ZMK dev container so toolchains are preinstalled
    container:
      image: ghcr.io/zmkfirmware/zmk-dev-arm:3.5
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        board: [nice_nano_v2]
        shield: [sofle_left, sofle_right]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show environment
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          python3 --version || true
          west --version || true
          cmake --version || true

      - name: Prepare west workspace (clone ZMK + fetch modules)
        run: |
          set -euxo pipefail
          mkdir -p /workdir
          cd /workdir
          git clone --depth=1 https://github.com/zmkfirmware/zmk.git
          west init -l zmk/app
          west update
          west zephyr-export

      - name: Build (${{ matrix.board }}, ${{ matrix.shield }})
        working-directory: /workdir
        run: |
          set -euxo pipefail
          BUILD_DIR="build-${{ matrix.shield }}"
          west build -s zmk/app -d "$BUILD_DIR" -b "${{ matrix.board }}" -- \
            -DZMK_CONFIG="${GITHUB_WORKSPACE}/config" \
            -DSHIELD="${{ matrix.shield }}" \
            -DZMK_EXTRA_MODULES="${GITHUB_WORKSPACE}"

          # Collect firmware
          mkdir -p "${GITHUB_WORKSPACE}/out/firmware-${{ matrix.shield }}"
          cp "$BUILD_DIR/zephyr"/zmk*.uf2 "${GITHUB_WORKSPACE}/out/firmware-${{ matrix.shield }}/" 2>/dev/null || true
          cp "$BUILD_DIR/zephyr"/zmk*.bin "${GITHUB_WORKSPACE}/out/firmware-${{ matrix.shield }}/" 2>/dev/null || true

      - name: Collect Zephyr diagnostics (.config + DTS)
        if: always()
        working-directory: /workdir
        run: |
          set -euxo pipefail
          BUILD_DIR="build-${{ matrix.shield }}"
          mkdir -p "${GITHUB_WORKSPACE}/out/diagnostics"
          cp "$BUILD_DIR/zephyr/.config" "${GITHUB_WORKSPACE}/out/diagnostics/${{ matrix.shield }}.config" 2>/dev/null || true
          cp "$BUILD_DIR/zephyr/zephyr.dts" "${GITHUB_WORKSPACE}/out/diagnostics/${{ matrix.shield }}.dts" 2>/dev/null || true
          echo "==== Quick feature flags ===="
          grep -E '^CONFIG_(ZMK_DISPLAY|EC11|WS2812|ZMK_RGB_UNDERGLOW|ZMK_RGB_UNDERGLOW_.*_START)=' \
            "${GITHUB_WORKSPACE}/out/diagnostics/${{ matrix.shield }}.config" || true
          echo "==== led_strip node lines ===="
          grep -n "led_strip" "${GITHUB_WORKSPACE}/out/diagnostics/${{ matrix.shield }}.dts" || true

      - name: Upload firmware (${{ matrix.shield }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.shield }}
          path: out/firmware-${{ matrix.shield }}/*
          if-no-files-found: warn

      - name: Upload diagnostics (${{ matrix.shield }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-${{ matrix.shield }}
          path: out/diagnostics/*
          if-no-files-found: warn

      # --- Keymap render (do this once to avoid duplicate artifacts) ---
      - name: Install keymap-drawer
        if: ${{ matrix.shield == 'sofle_left' }}
        run: python3 -m pip install --upgrade pip && python3 -m pip install "keymap-drawer>=0.15,<1.0"

      - name: Render keymap to SVG
        if: ${{ matrix.shield == 'sofle_left' }}
        run: |
          set -euxo pipefail
          mkdir -p out
          # Point to your actual .keymap file (not the directory)
          python3 -m keymap_drawer.cli parse -z config/sofle.keymap -o out/sofle.yaml
          python3 -m keymap_drawer.cli draw -c out/sofle.yaml -o out/keymap-sofle.svg

      - name: Upload keymap im


